// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6851.RobotBuildCompe2019;

import org.usfirst.frc6851.RobotBuildCompe2019.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6851.RobotBuildCompe2019.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickButton1;
    public JoystickButton joystickButton7;
    public JoystickButton joystickButton11;
    public JoystickButton joystickButton2;
    public JoystickButton joystickButton5;
    public JoystickButton joystickButton3;
    public JoystickButton joystickButton6;
    public JoystickButton joystickButton4;
    public JoystickButton joystickPOVup;
    public JoystickButton joystickPOVdown;
    public Joystick joystick1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(0);
        
        joystickButton2 = new JoystickButton(joystick1, 2);
        joystickButton2.whenPressed(new TombePourcheCMD());
        joystickButton11 = new JoystickButton(joystick1, 11);
        joystickButton11.whenPressed(new Descendre1etage());
        joystickButton7 = new JoystickButton(joystick1, 7);
        joystickButton7.whenPressed(new Monte1etage());
        joystickButton1 = new JoystickButton(joystick1, 1);
        joystickButton1.whenPressed(new Pourche());
        joystickButton5 = new JoystickButton(joystick1, 5);
        joystickButton5.whenPressed(new MontePourcheMan());
        joystickButton3 = new JoystickButton(joystick1, 3);
        joystickButton3.whenPressed(new DescPourcheMan());
        joystickButton6 = new JoystickButton(joystick1, 6);
        joystickButton6.whenPressed(new Monte1Man());
        joystickButton4 = new JoystickButton(joystick1, 4);
        joystickButton4.whenPressed(new Desc1Man());
//        JoystickPOVup = new JoystickButton(joystick1,13);
//        joystickPOVup.whenPressed(new Monte1etage());
//        JoystickPOVdown = new JoystickButton(joystick1,17);
//        joystickPOVdown.whenPressed(new Descendre1etage());

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive with joystick: STOP", new Drivewithjoystick(0, 0));
        SmartDashboard.putData("Pourche", new Pourche());
        SmartDashboard.putData("Monte1etage", new Monte1etage());
        SmartDashboard.putData("Descendre1etage", new Descendre1etage());
        SmartDashboard.putData("TombePourcheCMD", new TombePourcheCMD());
        SmartDashboard.putData("Etage Sol", new EtageGoto(0));
        SmartDashboard.putData("Hatch BAS", new EtageGoto(1));
        SmartDashboard.putData("Ballon BAS", new EtageGoto(2));
        SmartDashboard.putData("Hatch MILIEU", new EtageGoto(3));
        SmartDashboard.putData("Ballon Cargo", new EtageGoto(4));
        SmartDashboard.putData("Ballon MILIEU", new EtageGoto(5));
        SmartDashboard.putData("Hatch HAUT", new EtageGoto(6));
        SmartDashboard.putData("Ballon HAUT", new EtageGoto(7));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

